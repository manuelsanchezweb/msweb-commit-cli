import colors from "picocolors";

export const LANGUAGES = {
  en: {
    emoji: "üá∫üá∏",
    description: "English",
    locale: "en",
  },
  es: {
    emoji: "üá™üá∏",
    description: "Espa√±ol",
    locale: "es",
  },
  de: {
    emoji: "üá©üá™",
    description: "Deutsch",
    locale: "de",
  },
  ru: {
    emoji: "üá∑üá∫",
    description: "–†—É—Å—Å–∫–∏–π",
    locale: "ru",
  },
};

export const LANGUAGES_TEXT = {
  en: {
    intro: colors.inverse(
      `Hi! I am your commit assistant! ${colors.yellow("Hope this helps")}`
    ),
    errorGit: colors.red("Error: Please check that you are in a Git Repo"),
    checkIfConflict:
      "Did you check that you do not need to pull or sth? We are peacemakers here, do not want conflicts...",
    filesToAdd:
      "You have not staged files yet. Do you want to add some of these files?",
    commitType: "Select the commit type:",
    commitText: "Enter the text of the commit:",
    commitValidationEmpty: "Commit text cannot be empty",
    commitValidation50: "Commit text cannot be longer than 50 characters.",
    breakingChangeQuestion:
      "Does this commit have changes that (could) break previous compatibility?",
    breakingChangeMessage:
      "If yes, you should create a commit with type breaking change",
    lastConfirm: "Do you want to create the commit with the following message?",
    successMessage: "‚úîÔ∏è Commit created successfully",
    exitDefault: "The commit was not created.",
    exitNoFiles: "No files to commit",
    exitNoCommitType: "No commit type chosen",
    exitNoCommitMessage: "Commit message was not completed",
    confirmQuestion: "Confirm?",
    pushQuestion: "Do you want to push the changes to the following branch?: ",
    successPush: "‚úîÔ∏è Pushed successfully",
    finalMessage: "Thanks for using the commit assistant!",
  },
  es: {
    intro: colors.inverse(
      `¬°Buenas! Este es tu asistente para la creacion de commits. ${colors.yellow(
        "¬°Espero que te sirva!"
      )}`
    ),
    errorGit: colors.red("Error: Comprueba que estas en un repositorio de Git"),
    checkIfConflict:
      "¬øHas procurado que no vaya a ver un conflicto despu√©s de este commit? (Si no, prueba a hacer un pull)",
    filesToAdd:
      "No tienes nada seleccionado todav√≠a. ¬øQuieres agregar algo de esto?",
    commitType: "Selecciona el tipo de commit:",
    commitText: "Introduce el texto del commit:",
    commitValidationEmpty: "El texto del commit no puede estar vac√≠o",
    commitValidation50:
      "El texto del commit no puede tener mas de 50 caracteres",
    breakingChangeQuestion:
      "¬øTiene este commit cambios que rompen la compatibilidad anterior?",
    breakingChangeMessage:
      "Si la respuesta es s√≠, deberias crear un commit con el tipo de Breaking change",
    lastConfirm: "¬øQuieres crear el commit con el siguiente mensaje?",
    successMessage: "‚úîÔ∏è Commit creado con √©xito",
    exitDefault: "No se ha creado el commit",
    exitNoFiles: "No hay archivos para commitear",
    exitNoCommitType: "No se ha elegido un tipo de commit",
    exitNoCommitMessage: "No se ha completado el texto del commit",
    confirmQuestion: "¬øConfirmas?",
    pushQuestion: "¬øQuieres hacer push de los cambios a la siguiente branch?: ",
    successPush: "‚úîÔ∏è Push realizado con √©xito",
    finalMessage: "¬°Gracias por usar el asistente!",
  },
  de: {
    intro: colors.inverse(
      `Hallo! Ich bin dein Commit-Assistent! ${colors.yellow(
        "Hoffentlich hilft das"
      )}`
    ),
    errorGit: colors.red(
      "Fehler: Bitte √ºberpr√ºfe, ob du dich in einem Git Repo befindest!"
    ),
    checkIfConflict:
      "Hast du √ºberpr√ºft, ob du nicht ziehen (pullen) musst oder √§hnliches? Wir sind Friedensstifter und wollen keine Konflikte...",
    filesToAdd:
      "Du hast noch keine Dateien zur Verf√ºgung gestellt (staged). Willst du einige dieser Dateien hinzuf√ºgen?",
    commitType: "W√§hle den Commit-Typ aus:",
    commitText: "Gib den Text der √úbergabe (Commits) ein:",
    commitValidationEmpty: "Der Commit-Text darf nicht leer sein!",
    commitValidation50: "Commit-Text darf nicht l√§nger als 50 Zeichen sein!",
    breakingChangeQuestion:
      "Enth√§lt dieser Commit √Ñnderungen, die die bisherige Kompatibilit√§t beeintr√§chtigen (k√∂nnten)?",
    breakingChangeMessage:
      "Wenn ja, sollten Sie einen Commit mit dem Typ 'Breaking Change' erstellen",
    lastConfirm: "Willst du den Commit mit der folgenden Nachricht erstellen?",
    successMessage: "‚úîÔ∏è Commit erfolgreich erstellt",
    exitDefault: "Der Commit wurde nicht erstellt.",
    exitNoFiles: "Keine Dateien zu √ºbertragen",
    exitNoCommitType: "Keinen Commit-Typen ausgew√§hlt",
    exitNoCommitMessage: "Commit-Nachricht wurde nicht abgeschlossen",
    confirmQuestion: "Best√§tigen?",
    pushQuestion: "Willst du die √Ñnderungen auf den folgenden Branch pushen?: ",
    successPush: "‚úîÔ∏è Push erfolgreich",
    finalMessage: "Danke, dass du den Commit-Assistenten benutzt hast!",
  },
  ru: {
    intro: colors.inverse(
      `–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–æ–º–º–∏—Ç–∞–º! ${colors.yellow(
        "–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç"
      )}`
    ),
    errorGit: colors.red(
      "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ª–∏ –≤—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ Git!"
    ),
    checkIfConflict:
      "–í—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π? –ú—ã —Ö–æ—Ç–∏–º –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...",
    filesToAdd:
      "–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö —Ñ–∞–π–ª–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã?",
    commitType: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–º–∏—Ç–∞:",
    commitText: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞:",
    commitValidationEmpty: "–¢–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!",
    commitValidation50: "–¢–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤!",
    breakingChangeQuestion:
      "–°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç—Ç–æ—Ç –∫–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏?",
    breakingChangeMessage:
      "–ï—Å–ª–∏ –¥–∞, –≤–∞–º —Å–ª–µ–¥—É–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç —Å —Ç–∏–ø–æ–º 'Breaking Change'",
    lastConfirm: "–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–º–∏—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ?",
    successMessage: "‚úîÔ∏è –ö–æ–º–º–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
    exitDefault: "–ö–æ–º–º–∏—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.",
    exitNoFiles: "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞",
    exitNoCommitType: "–¢–∏–ø –∫–æ–º–º–∏—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω",
    exitNoCommitMessage: "–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
    confirmQuestion: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
    pushQuestion: "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ç–∫—É?: ",
    successPush: "‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
    finalMessage: "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–æ–º–º–∏—Ç–∞–º!",
  },
};
